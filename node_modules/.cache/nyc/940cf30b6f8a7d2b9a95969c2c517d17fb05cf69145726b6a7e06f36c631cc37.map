{"version":3,"sources":["BookService.js"],"names":["BookService","database","Book","findAll","newBook","create","id","updateBook","findOne","where","Number","bookToUpdate","update","bookToDelete","destroy","deletedBook","bookToFind"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMAC,O;;;;;;;uBAEAH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMGE,E,EAAIC,W;;;;;;;;uBAEON,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAG;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADqC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAGFA,Y;;;;;;uBACMV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAjC,C;;;kDACCC,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKSD,E;;;;;;;;uBAEWL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADsC,iBAAtB,C;;;AAArBO,gBAAAA,Y;;qBAGFA,Y;;;;;;uBAC0BZ,mBAASC,IAAT,CAAcY,OAAd,CAAsB;AAAEL,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAtB,C;;;AAApBS,gBAAAA,W;kDACCA,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMT,E;;;;;;;;uBAEYL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC3CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADoC,iBAAtB,C;;;AAAnBU,gBAAAA,U;;qBAGFA,U;;;;;kDACOA,U;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJhB,W","sourceRoot":"/home/gal1le0/development/tuto/nodejs/APIs/with-psql/api/server/services","sourcesContent":["import database from '../../models';\n\nclass BookService {\n    static async getAllBooks() {\n        try {\n            return await database.Book.findAll();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async addBook(newBook) {\n        try {\n            return await database.Book.create(newBook);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async updateBook(id, updateBook) {\n        try {\n            const bookToUpdate = await database.Book.findOne({\n                where: ({ id: Number(id) })\n            });\n            if (bookToUpdate) {\n                await database.Book.update(updateBook, { where: { id: Number(id) } });\n                return updateBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleteBook(id) {\n        try {\n            const bookToDelete = await database.Book.findOne({\n                where: { id: Number(id) }\n            });\n            if (bookToDelete) {\n                const deletedBook = await database.Book.destroy({ where: { id: Number(id) } });\n                return deletedBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getBook(id) {\n        try {\n            const bookToFind = await database.Book.findOne({\n                where: { id: Number(id) }\n            });\n            if (bookToFind) {\n                return bookToFind;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default BookService;"]}