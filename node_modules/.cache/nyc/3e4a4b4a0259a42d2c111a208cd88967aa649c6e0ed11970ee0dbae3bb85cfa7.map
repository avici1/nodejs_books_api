{"version":3,"sources":["BookController.js"],"names":["util","Util","BookController","req","res","BookService","getAllBooks","allBooks","length","setSuccess","send","setError","message","body","title","price","description","newBook","addBook","alteredBook","id","params","Number","updateBook","getBook","oneBook","deleteBook","deletedBook"],"mappings":"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","sourceRoot":"/home/gal1le0/development/tuto/nodejs/APIs/with-psql/api/server/controllers","sourcesContent":["import BookService from '../services/BookService';\nimport Util from '../utils/Util';\n\nconst util = new Util;\nclass BookController {\n    static async getAllBook(req, res) {\n        try {\n            const allBooks = await BookService.getAllBooks();\n            if (allBooks.length > 0) {\n                util.setSuccess(200, 'Books Retrieved', allBooks);\n            } else {\n                util.setSuccess(200, 'Books Not Found');\n            }\n            return util.send(res);\n        } catch (error) {\n            util.setError(400, error.message)\n            return util.send(res);\n\n        }\n    }\n    static async AddBooks(req, res) {\n        try {\n            if (!req.body.title || !req.body.price || !req.body.description) {\n                util.setError(401, 'Please provide accurate data');\n                return util.send(res);\n            } else {\n                const newBook = req.body\n                const addBook = await BookService.addBook(newBook);\n                util.setSuccess(201, 'Book added', addBook);\n                return util.send(res)\n            }\n        } catch (error) {\n            util.setError(400, error.message);\n            return util.send(res);\n        }\n    }\n    static async UpdateBooks(req, res) {\n        const alteredBook = req.body;\n        const { id } = req.params;\n        if (!Number(id)) {\n            util.setError(400, 'Please provide a parameter');\n            return util.send(res);\n        } else {\n            try {\n                const updateBook = await BookService.updateBook(id, alteredBook);\n                if (!updateBook) {\n                    util.setError(400, `cant update book with ${id}`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess(200, `updated book with ${id} to ${alteredBook}`,updateBook);\n                    return util.send(res);\n                }\n            } catch (error) {\n                util.setError(400, `An error occured ${error.message}`)\n            }\n        }\n    }\n\n    static async findOneBook(req, res) {\n        const { id } = req.params;\n        if (!Number(id)) {\n            util.setError(400, 'please provide a valid parameter');\n            return util.send(res);\n        } else {\n            try {\n                const oneBook = await BookService.getBook(id);\n                if (!oneBook) {\n                    util.setError(400, `Book with id ${id} can't be found`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess(200, `Book with id ${id} updates sucessfully`,oneBook);\n                    return util.send(res);\n                }\n            } catch (error) {\n                util.setError(400, `An occured ${error.message}`);\n                return util.send(res);\n            }\n        }\n    }\n    static async deleteOneBook(res, req) {\n        const { id } = req.params;\n        if (!Number(id)) {\n            util.setError(400, 'please provide a valid parameter')\n            return util.send(res);\n        } else {\n            try {\n                const deletedBook = await BookService.deleteBook(id);\n                if (!deletedBook) {\n                    util.setError(400, `Book with id ${id} not deleted`);\n                    return util.send(res);\n                } else {\n                    util.setSuccess(200, `Book with id ${id} added sucessfully`);\n                    return util.send(res);\n                }\n            } catch (error) {\n\n            }\n        }\n    }\n}\n\nexport default BookController;"]}