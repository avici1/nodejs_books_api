{"version":3,"sources":["BookService.js"],"names":["BookService","database","Book","findAll","create","newBook","id","updateBook","findOne","where","Number","bookToUpdate","update","bookToDelete","destroy","deletedBook","bookToFind"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;;;;uBAGmBC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAQAF,mBAASC,IAAT,CAAcE,MAAd,CAAqBC,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAMGC,E,EAAGC,W;;;;;;;;uBAEQN,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAG;AAACH,oBAAAA,EAAE,EAACI,MAAM,CAACJ,EAAD;AAAV;AADqC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAGFA,Y;;;;;;uBACMV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAgC;AAACE,kBAAAA,KAAK,EAAE;AAACH,oBAAAA,EAAE,EAACI,MAAM,CAACJ,EAAD;AAAV;AAAR,iBAAhC,C;;;kDACCC,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKSD,E;;;;;;;;uBAEWL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAG;AAACH,oBAAAA,EAAE,EAACI,MAAM,CAACJ,EAAD;AAAV;AADqC,iBAAtB,C;;;AAArBO,gBAAAA,Y;;qBAGFA,Y;;;;;;uBACyBZ,mBAASC,IAAT,CAAcY,OAAd,CAAsB;AAACL,kBAAAA,KAAK,EAAC;AAACH,oBAAAA,EAAE,EAACI,MAAM,CAACJ,EAAD;AAAV;AAAP,iBAAtB,C;;;AAArBS,gBAAAA,W;kDACGA,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;;qDAKMT,E;;;;;;;;uBAEYL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC3CC,kBAAAA,KAAK,EAAG;AAACH,oBAAAA,EAAE,EAACI,MAAM,CAACJ,EAAD;AAAV;AADmC,iBAAtB,C;;;AAAnBU,gBAAAA,U;;qBAGFA,U;;;;;kDACOA,U;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJhB,W","sourceRoot":"/home/gal1le0/development/tuto/nodejs/APIs/with-psql/api/server/services","sourcesContent":["import database from  '../../models';\n\nclass BookService{\n    static async getAllBooks (){\n        try {\n            return await database.Book.findAll();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async addBook(){\n        try {\n            return await database.Book.create(newBook);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async updateBook(id,updateBook){\n        try {\n            const bookToUpdate = await database.Book.findOne({\n                where: ({id:Number(id)})\n            });\n            if (bookToUpdate){\n                await database.Book.update(updateBook,{where: {id:Number(id)}});\n                return updateBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async deleteBook(id){\n        try {\n            const bookToDelete = await database.Book.findOne({\n                where : {id:Number(id)}\n            });\n            if (bookToDelete){\n              const deletedBook =  await database.Book.destroy({where:{id:Number(id)}});\n                return deletedBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n    static async getBook(id){\n        try {\n            const bookToFind = await database.Book.findOne({\n                where : {id:Number(id)}\n            });\n            if (bookToFind){\n                return bookToFind;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default BookService;"]}