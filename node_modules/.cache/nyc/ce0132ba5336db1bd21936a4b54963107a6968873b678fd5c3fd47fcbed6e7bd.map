{"version":3,"sources":["test.js"],"names":["chai","use","chatHttp","expect","describe","it","done","book","title","price","description","request","app","post","set","send","end","res","req","status","to","equal","body","data","include","id","get","should","have","property","properpty","bookId","eql","updateBook","put"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,iBAAKC,GAAL,CAASC,oBAAT;;IACQC,M,GAAWH,gB,CAAXG,M;AAERC,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAChCC,EAAAA,EAAE,CAAC,6BAAD,EAAgC,UAACC,IAAD,EAAU;AACxC,QAAMC,IAAI,GAAG;AACTC,MAAAA,KAAK,EAAE,uBADE;AAETC,MAAAA,KAAK,EAAE,EAFE;AAGTC,MAAAA,WAAW,EAAE;AAHJ,KAAb;;AAKAV,qBAAKW,OAAL,CAAaC,eAAb,EACKC,IADL,CACU,YADV,EAEKC,GAFL,CAES,QAFT,EAEmB,kBAFnB,EAGKC,IAHL,CAGUR,IAHV,EAIKS,GAJL,CAIS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACc,GAAG,CAACE,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAlB,MAAAA,MAAM,CAACc,GAAG,CAACK,IAAJ,CAASC,IAAV,CAAN,CAAsBH,EAAtB,CAAyBI,OAAzB,CAAiC;AAC7BC,QAAAA,EAAE,EAAE,CADyB;AAE7BjB,QAAAA,KAAK,EAAEc,IAAI,CAACd,KAFiB;AAG7BC,QAAAA,KAAK,EAAEa,IAAI,CAACb,KAHiB;AAI7BC,QAAAA,WAAW,EAAEY,IAAI,CAACZ;AAJW,OAAjC;AAMAJ,MAAAA,IAAI;AACP,KAbL;AAcH,GApBC,CAAF;AAsBAD,EAAAA,EAAE,CAAC,2CAAD,EAA8C,UAACC,IAAD,EAAU;AACtD,QAAMC,IAAI,GAAG;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;;AAGAR,qBAAKW,OAAL,CAAaC,eAAb,EACKC,IADL,CACU,YADV,EAEKC,GAFL,CAES,QAFT,EAEmB,kBAFnB,EAGKC,IAHL,CAGUR,IAHV,EAIKS,GAJL,CAIS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACc,GAAG,CAACE,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AAEH,KAPL;;AAQAf,IAAAA,IAAI;AACP,GAbC,CAAF;AAeAD,EAAAA,EAAE,CAAC,6BAAD,EAAgC,UAACC,IAAD,EAAU;AACxCN,qBAAKW,OAAL,CAAaC,eAAb,EACKc,GADL,CACS,eADT,EAEKZ,GAFL,CAES,kBAFT,EAGKE,GAHL,CAGS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfD,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BC,QAA7B,CAAsC,IAAtC;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BC,QAA7B,CAAsC,OAAtC;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BC,QAA7B,CAAsC,aAAtC;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BE,SAA7B,CAAuC,OAAvC;AACAxB,MAAAA,IAAI;AACP,KATL;AAUH,GAXC,CAAF;AAaAD,EAAAA,EAAE,CAAC,+BAAD,EAAkC,UAACC,IAAD,EAAU;AAC1C,QAAMyB,MAAM,GAAG,IAAf;;AACA/B,qBAAKW,OAAL,CAAaC,eAAb,EACKc,GADL,qBACsBK,MADtB,GAEKjB,GAFL,CAES,kBAFT,EAGKE,GAHL,CAGS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACc,GAAG,CAACE,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAJ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BC,QAA7B,CAAsC,IAAtC;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BC,QAA7B,CAAsC,OAAtC;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BC,QAA7B,CAAsC,aAAtC;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAc,CAAd,EAAiBI,MAAjB,CAAwBC,IAAxB,CAA6BE,SAA7B,CAAuC,OAAvC;AACAxB,MAAAA,IAAI;AACP,KAVL;AAWH,GAbC,CAAF;AAcAD,EAAAA,EAAE,CAAC,kCAAD,EAAqC,UAACC,IAAD,EAAU;AAC7C,QAAMyB,MAAM,GAAG,EAAf;;AACA/B,qBAAKW,OAAL,CAAaC,eAAb,EACKc,GADL,qBACsBK,MADtB,GAEKjB,GAFL,CAES,kBAFT,EAGKE,GAHL,CAGS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACc,GAAG,CAACE,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAJ,MAAAA,GAAG,CAACK,IAAJ,CAASK,MAAT,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8B,SAA9B;AACAZ,MAAAA,GAAG,CAACK,IAAJ,CAASK,MAAT,CAAgBK,GAAhB,wBAAoCD,MAApC;AACAzB,MAAAA,IAAI;AACP,KARL;AASH,GAXC,CAAF;AAYAD,EAAAA,EAAE,CAAC,oCAAD,EAAuC,UAACC,IAAD,EAAU;AAC/C,QAAM2B,UAAU,GAAG;AACfR,MAAAA,EAAE,EAAE,KADW;AAEfjB,MAAAA,KAAK,EAAE,4BAFQ;AAGfC,MAAAA,KAAK,EAAE,QAHQ;AAIfC,MAAAA,WAAW,EAAE;AAJE,KAAnB;;AAMAV,qBAAKW,OAAL,CAAaC,eAAb,EACKsB,GADL,4BAC6BH,MAD7B,GAEKjB,GAFL,CAES,kBAFT,EAGKE,GAHL,CAGS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACc,GAAG,CAACE,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACJJ,MAAAA,GAAG,CAACU,MAAJ,CAAWC,IAAX,CAAgBC,QAAhB,CAAyB,SAAzB;AACAZ,MAAAA,GAAG,CAACU,MAAJ,CAAWC,IAAX,CAAgBI,GAAhB,iCAA6CD,MAA7C;AACIzB,MAAAA,IAAI;AACP,KARL;AASH,GAhBC,CAAF,CA7EgC,CA8FhC;AAEA;;AACAD,EAAAA,EAAE,CAAC,sCAAD,EAAyC,UAACC,IAAD,EAAU;AACjD,QAAMmB,EAAE,GAAG,MAAX;;AACAzB,qBAAKW,OAAL,CAAaC,eAAb,uCACgCa,EADhC,GAEKX,GAFL,CAES,kBAFT,EAGKE,GAHL,CAGS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACff,MAAAA,MAAM,CAACc,GAAG,CAACE,MAAL,CAAN,CAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACJJ,MAAAA,GAAG,CAACU,MAAJ,CAAWC,IAAX,CAAgBC,QAAhB,CAAyB,SAAzB;AACAZ,MAAAA,GAAG,CAACU,MAAJ,CAAWC,IAAX,CAAgBI,GAAhB,wBAAoCP,EAApC;AACInB,MAAAA,IAAI;AACP,KARL;AASH,GAXC,CAAF;AAYH,CA7GO,CAAR","sourceRoot":"/home/gal1le0/development/tuto/nodejs/APIs/with-psql/api/test","sourcesContent":["import chai from 'chai';\nimport chatHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../app';\n\nchai.use(chatHttp);\nconst { expect } = chai;\n\ndescribe('Testing endpoints', () => {\n    it('should create  a book entry', (done) => {\n        const book = {\n            title: 'First awesome browser',\n            price: 45,\n            description: 'A practical guide to shutup'\n        };\n        chai.request(app)\n            .post('api/books/')\n            .set('Accept', 'application/json')\n            .send(book)\n            .end((res, req) => {\n                expect(res.status).to.equal(201);\n                expect(res.body.data).to.include({\n                    id: 1,\n                    title: body.title,\n                    price: body.price,\n                    description: body.description\n                });\n                done();\n            });\n    });\n\n    it('should create a book with incomplete data', (done) => {\n        const book = {\n            title: 'First awesome browser',\n        };\n        chai.request(app)\n            .post('api/books/')\n            .set('Accept', 'application/json')\n            .send(book)\n            .end((res, req) => {\n                expect(res.status).to.equal(400)\n\n            });\n        done();\n    });\n\n    it('should create get all books', (done) => {\n        chai.request(app)\n            .get('api/books/all')\n            .set('application/json')\n            .end((res, req) => {\n                res.body.data[0].should.have.property('id');\n                res.body.data[0].should.have.property('title');\n                res.body.data[0].should.have.property('description');\n                res.body.data[0].should.have.properpty('price');\n                done();\n            });\n    });\n\n    it('should  get a particular test', (done) => {\n        const bookId = 8868;\n        chai.request(app)\n            .get(`api/books/${bookId}`)\n            .set('application/json')\n            .end((res, req) => {\n                expect(res.status).to.equal(200);\n                res.body.data[0].should.have.property('id');\n                res.body.data[0].should.have.property('title');\n                res.body.data[0].should.have.property('description');\n                res.body.data[0].should.have.properpty('price');\n                done();\n            });\n    });\n    it('should not get a particular test', (done) => {\n        const bookId = 34;\n        chai.request(app)\n            .get(`api/books/${bookId}`)\n            .set('application/json')\n            .end((res, req) => {\n                expect(res.status).to.equal(400);\n                res.body.should.have.property('message');\n                res.body.should.eql(`Book with id ${bookId} can't be found`);\n                done();\n            });\n    });\n    it('should get a non int Id for update', (done) => {\n        const updateBook = {\n            id: 'rer',\n            title: 'Updated Awesome book again',\n            price: '$11.99',\n            description: 'We have updated the price'\n        };\n        chai.request(app)\n            .put(`api/books/update/${bookId}`)\n            .set('application/json')\n            .end((res, req) => {\n                expect(res.status).to.equal(400);\n            res.should.have.property('message');\n            res.should.have.eql(`cant update book with ${bookId}`);\n                done();\n            });\n    });\n    // it('should update a book', (done) =>{\n\n    // })\n    it('should delete a book with a wrong id', (done) => {\n        const id = 'rroi';\n        chai.request(app)\n            .delete(`api/books/delete/${id}`)\n            .set('application/json')\n            .end((res, req) => {\n                expect(res.status).to.equal(400);\n            res.should.have.property('message');\n            res.should.have.eql(`Book with id ${id} not deleted'`);\n                done();\n            });\n    })\n});"]}